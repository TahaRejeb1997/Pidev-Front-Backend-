{"ast":null,"code":"import authors from '../../data/doctor/doctor.json';\nimport blog from '../../data/blog/blog.json';\nimport blogcategory from '../../data/category.json';\nimport blogtags from '../../data/tags.json';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/platform-browser\";\nexport let BlogHelperService = /*#__PURE__*/(() => {\n  class BlogHelperService {\n    constructor(router, route, sanitizer) {\n      this.router = router;\n      this.route = route;\n      this.sanitizer = sanitizer;\n      // pagination\n      this.page = 1;\n      // Blog\n      this.blogblock = blog;\n      this.blogdetails = blog;\n      // Category\n      this.category = blogcategory;\n      this.blogcategory = blogcategory;\n      // Tags\n      this.tags = blogtags;\n      this.blogtags = blogtags;\n      // Authors\n      this.author = authors;\n      // Social Share\n      this.pageUrl = window.location.href;\n      this.searchText = '';\n      this.searchQuery = '';\n    }\n    // Category\n    getCategories(items) {\n      var elems = blogcategory.filter(item => {\n        return items.includes(item.id);\n      });\n      return elems;\n    }\n    // Tags\n    getTags(items) {\n      var elems = blogtags.filter(item => {\n        return items.includes(item.id);\n      });\n      return elems;\n    }\n    // Author\n    getAuthor(items) {\n      var elems = authors.filter(item => {\n        return items.includes(item.id);\n      });\n      return elems;\n    }\n    // Count Category\n    setCategoriesCount() {\n      for (var i = 0; i < this.blogcategory.length; i++) {\n        var count = this.blogblock.filter(post => {\n          return post.category.includes(parseInt(this.blogcategory[i].id));\n        });\n        count = count.length;\n        this.blogcategory[i].count = count;\n      }\n    }\n    // Related post\n    getPostByCategory(items) {\n      var elems = blog.filter(post => {\n        return parseInt(post.id) !== parseInt(this.route.snapshot.params.id) && post.category.some(r => items.includes(r));\n      });\n      return elems;\n    }\n    // Post Details\n    setPost(id) {\n      this.blogdetails = blog.filter(item => {\n        return item.id == id;\n      });\n    }\n    // sanitize url\n    sanitnizeAudioURL(url) {\n      return this.sanitizer.bypassSecurityTrustResourceUrl(url);\n    }\n    // Recent post\n    changeToMonth(month) {\n      var months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n      return months[month];\n    }\n    setDemoDate() {\n      var today = new Date();\n      this.blogblock.slice(0, 3).map(post => (post.timestamp = today.getTime(),\n      // Remove this date on your live demo. This is only used for preview purposed. Your date should actually be updated\n      // in the blog.json object\n      post.postdate = `${today.getDate()} ${this.changeToMonth(today.getMonth())}, ${today.getFullYear()}`));\n    }\n    getRecentPost() {\n      var elems = blog.filter(post => {\n        return post.timestamp > new Date(post.postdate);\n      });\n      return elems;\n    }\n    // get Name\n    getNameInitials(string) {\n      var names = string.split(' '),\n        initials = names[0].substring(0, 1).toUpperCase();\n      if (names.length > 1) {\n        initials += names[names.length - 1].substring(0, 1).toUpperCase();\n      }\n      return initials;\n    }\n    // Search Filter\n    onSubmit() {\n      if (this.searchText === \"\") {\n        return;\n      } else {\n        this.router.navigate(['blog/search', this.searchText]);\n      }\n    }\n    // Filter\n    // Category Filter\n    setCategory(id) {\n      this.blogcategory = id;\n    }\n    getCategory() {\n      return this.blogcategory;\n    }\n    getPostsByCategory(catId) {\n      return this.blogblock = blog.filter(item => {\n        return item.category.includes(parseInt(catId));\n      });\n    }\n    // Tag Filter\n    setTag(id) {\n      this.blogtags = id;\n    }\n    getTag() {\n      return this.blogtags;\n    }\n    getPostsByTags(tagId) {\n      return this.blogblock = blog.filter(item => {\n        return item.tags.includes(parseInt(tagId));\n      });\n    }\n    // Author Filter\n    setAuthor(id) {\n      this.author = id;\n    }\n    getAuthorPost() {\n      return this.author;\n    }\n    getPostsByAuthors(authorId) {\n      return this.blogblock = blog.filter(item => {\n        return item.author.includes(parseInt(authorId));\n      });\n    }\n    // Search Filter\n    setSearch(query) {\n      this.searchQuery = query;\n    }\n    getSearch() {\n      return this.searchQuery;\n    }\n    getPostsBySearch(query) {\n      return this.blogblock = blog.filter(item => {\n        return item.title.toLowerCase().includes(query.toLowerCase());\n      });\n    }\n    // Fetch All filter\n    setPosts() {\n      var postsByCategory = this.getCategory() != undefined ? this.getPostsByCategory(this.getCategory()) : '',\n        postsByTags = this.getTag() != undefined ? this.getPostsByTags(this.getTag()) : '',\n        postsByAuthor = this.getAuthorPost() != undefined ? this.getPostsByAuthors(this.getAuthorPost()) : '',\n        postsBySearch = this.getSearch() != undefined ? this.getPostsBySearch(this.getSearch()) : '';\n      if ((postsByCategory != '' || postsByCategory != undefined || postsByCategory != null) && postsByCategory.length > 0) {\n        this.blogblock = postsByCategory;\n      } else if ((postsByTags != '' || postsByTags != undefined || postsByTags != null) && postsByTags.length > 0) {\n        this.blogblock = postsByTags;\n      } else if ((postsByAuthor != '' || postsByAuthor != undefined || postsByAuthor != null) && postsByAuthor.length > 0) {\n        this.blogblock = postsByAuthor;\n      } else if ((postsBySearch != '' || postsBySearch != undefined || postsBySearch != null) && postsBySearch.length > 0) {\n        this.blogblock = postsBySearch;\n      }\n    }\n    ngAfterContentInit() {\n      this.setCategory(this.route.snapshot.params.catId);\n      this.setTag(this.route.snapshot.params.tagId);\n      this.setAuthor(this.route.snapshot.params.authorId);\n      this.setSearch(this.route.snapshot.params.query);\n      this.setPosts();\n      this.setPost(this.route.snapshot.params.id);\n    }\n    ngOnInit() {\n      this.setCategoriesCount();\n      this.setDemoDate();\n    }\n    socialShare(title) {\n      var socialIcons = [{\n        title: \"facebook\",\n        iconClass: \"fab fa-facebook-f\",\n        iconStyle: \"fb\",\n        link: \"https://www.facebook.com/sharer/sharer.php?u=\" + encodeURIComponent(this.pageUrl) + \"\"\n      }, {\n        title: \"twitter\",\n        iconClass: \"fab fa-twitter\",\n        iconStyle: \"tw\",\n        link: \"http://twitter.com/intent/tweet?text=\" + encodeURIComponent(title) + \"&\" + encodeURIComponent(this.pageUrl) + \"\"\n      }, {\n        title: \"linkedin\",\n        iconClass: \"fab fa-linkedin-in\",\n        iconStyle: \"ln\",\n        link: \"https://www.linkedin.com/shareArticle?mini=true&url=\" + encodeURIComponent(this.pageUrl) + \"&title=\" + encodeURIComponent(title) + \"\"\n      }, {\n        title: \"pinterest\",\n        iconClass: \"fab fa-pinterest-p\",\n        iconStyle: \"gg\",\n        link: \"http://pinterest.com/pin/create/button/?url=\" + encodeURIComponent(this.pageUrl) + \"\"\n      }];\n      return socialIcons;\n    }\n    openSocialPopup(social) {\n      window.open(social.link, \"MsgWindow\", \"width=600,height=600\");\n    }\n  }\n  BlogHelperService.ɵfac = function BlogHelperService_Factory(t) {\n    return new (t || BlogHelperService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i1.ActivatedRoute), i0.ɵɵinject(i2.DomSanitizer));\n  };\n  BlogHelperService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BlogHelperService,\n    factory: BlogHelperService.ɵfac,\n    providedIn: 'root'\n  });\n  return BlogHelperService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}