{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { ProductService } from './product.service';\nimport productblock from '../../data/shop/shop.json';\nimport productcategory from '../../data/shop/category.json';\nimport producttag from '../../data/tags.json';\nimport { LabelType } from \"@angular-slider/ngx-slider\";\nimport author from '../../data/doctor/doctor.json';\nlet ShopService = class ShopService extends ProductService {\n  constructor(modalService, productService, router, route) {\n    super();\n    this.modalService = modalService;\n    this.productService = productService;\n    this.router = router;\n    this.route = route;\n    // pagination\n    this.page = 1;\n    this.shopblock = [];\n    this.producttag = producttag;\n    this.tags = producttag;\n    this.category = productcategory;\n    this.block = productblock;\n    this.productcategory = productcategory;\n    this.productblock = productblock;\n    this.shopdetails = productblock;\n    // Increment decrement\n    this.counter = 1;\n    // Price filter\n    this.priceFilter = [0, 100];\n    this.priceFilterOptions = {\n      floor: 1,\n      ceil: 100,\n      translate: (value, label) => {\n        switch (label) {\n          case LabelType.Low:\n            return value + \" $\";\n          case LabelType.High:\n            return value + \" $\";\n          default:\n            return value + \" $\";\n        }\n      }\n    };\n    // Social Share\n    this.pageUrl = window.location.href;\n    // Filter\n    this.items = productblock;\n    this.categories = productcategory;\n    this.filteredItems = [] = [...this.items];\n    this.searchText = '';\n    this.searchQuery = '';\n    this.minPrice = 0;\n    this.maxPrice = 0;\n    this.activeItem = 1;\n  }\n  open(content, item) {\n    this.modalContent = item;\n    this.modalService.open(content, {\n      centered: true,\n      size: \"lg\",\n      windowClass: 'sigma_quick-view-modal'\n    });\n  }\n  increment() {\n    this.counter += 1;\n  }\n  decrement() {\n    this.counter > 1 ? this.counter -= 1 : 1;\n  }\n  // Category\n  getCategories(items) {\n    var elems = productcategory.filter(item => {\n      return items.includes(item.id);\n    });\n    return elems;\n  }\n  // Author\n  getAuthor(items) {\n    var elems = author.filter(item => {\n      return items.includes(item.id);\n    });\n    return elems;\n  }\n  // Tag\n  getTags(items) {\n    var elems = producttag.filter(item => {\n      return items.includes(item.id);\n    });\n    return elems;\n  }\n  // Featured\n  getFeatured() {\n    var elems = productblock.filter(item => {\n      return item.featured === true;\n    });\n    return elems;\n  }\n  // Recent post\n  changeToMonth(month) {\n    var months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    return months[month];\n  }\n  setDemoDate() {\n    var today = new Date();\n    this.shopblock.slice(0, 4).map(item => (item.timestamp = today.getTime(),\n    // Remove this date on your live demo. This is only used for preview purposed. Your date should actually be updated\n    // in the blog.json object\n    item.postdate = `${today.getDate()} ${this.changeToMonth(today.getMonth())}, ${today.getFullYear()}`));\n  }\n  getRecentProduct() {\n    var elems = productblock.filter(item => {\n      return item.timestamp > new Date(item.postdate);\n    });\n    return elems;\n  }\n  // Related Product\n  getProductByCategory(items) {\n    var elems = productblock.filter(product => {\n      return parseInt(product.id) !== parseInt(this.router.snapshot.params.id) && product.category.some(r => items.includes(r));\n    });\n    return elems;\n  }\n  // Search \n  onSubmit() {\n    if (this.searchText === \"\") {\n      return;\n    } else {\n      this.route.navigate(['shop/search', this.searchText]);\n    }\n  }\n  handlePriceChange() {\n    this.minPrice = this.priceFilter[0];\n    this.maxPrice = this.priceFilter[1];\n    if (this.maxPrice != 0 && this.minPrice != 0) {\n      this.route.navigate(['/shop', this.minPrice, this.maxPrice]);\n    }\n  }\n  // Category Filter\n  setCategory(id) {\n    this.productcategory = id;\n  }\n  getCategory() {\n    return this.productcategory;\n  }\n  getPostsByCategory(catId) {\n    return this.shopblock = productblock.filter(item => {\n      return item.category.includes(parseInt(catId));\n    });\n  }\n  // Tag Filter\n  setTag(id) {\n    this.producttag = id;\n  }\n  getTag() {\n    return this.producttag;\n  }\n  getPostsByTag(tagId) {\n    return this.shopblock = productblock.filter(item => {\n      return item.tags.includes(parseInt(tagId));\n    });\n  }\n  // Search Filter\n  setSearch(query) {\n    this.searchQuery = query;\n  }\n  getSearch() {\n    return this.searchQuery;\n  }\n  getPostsBySearch(query) {\n    return this.shopblock = productblock.filter(item => {\n      return item.title.toLowerCase().includes(query.toLowerCase());\n    });\n  }\n  // Price Filter\n  setPrice(minPrice, maxPrice) {\n    this.minPrice = minPrice;\n    this.maxPrice = maxPrice;\n  }\n  getPrice() {\n    return [this.minPrice, this.maxPrice];\n  }\n  getPostsByPrice(minPrice, maxPrice) {\n    return this.shopblock = productblock.filter(item => {\n      return item.price > minPrice && item.price <= maxPrice;\n    });\n  }\n  // Fetch All filter\n  setPosts() {\n    var postsByCategory = this.getCategory() != undefined ? this.getPostsByCategory(this.getCategory()) : '';\n    var postsBySearch = this.getSearch() != undefined ? this.getPostsBySearch(this.getSearch()) : '';\n    var postsByTag = this.getTag() != undefined ? this.getPostsByTag(this.getTag()) : '';\n    var postsByPrice = this.getPrice() != undefined ? this.getPostsByPrice(this.getPrice()[0], this.getPrice()[1]) : '';\n    if (postsByCategory != undefined && postsByCategory != [] && postsByCategory.length > 0) {\n      this.shopblock = postsByCategory;\n    } else if (postsBySearch != undefined && postsBySearch != [] && postsBySearch.length > 0) {\n      this.shopblock = postsBySearch;\n    } else if (postsByTag != undefined && postsByTag != [] && postsByTag.length > 0) {\n      this.shopblock = postsByTag;\n    } else if (postsByPrice != undefined && postsByPrice != [] && postsByPrice.length > 0) {\n      this.shopblock = postsByPrice;\n    } else {\n      this.shopblock = this.productService.getProducts();\n    }\n  }\n  //Detail\n  setProduct(id) {\n    this.shopdetails = productblock.filter(item => {\n      return item.id == id;\n    });\n  }\n  ngAfterContentInit() {\n    this.setSearch(this.router.snapshot.params.query);\n    this.setCategory(this.router.snapshot.params.catId);\n    this.setTag(this.router.snapshot.params.tagId);\n    this.setPrice(this.router.snapshot.params.minPrice, this.router.snapshot.params.maxPrice);\n    this.setPosts();\n    this.setProduct(this.router.snapshot.params.id);\n  }\n  ngAfterViewInit() {}\n  ngOnInit() {\n    this.shopblock = this.productService.getProducts();\n    this.setCategoriesCount();\n    this.setDemoDate();\n    this.cartlength = this.productService.getProductsCountInCart();\n    this.wishlistlength = this.productService.getProductsCountInWishlist();\n    this.productService.watchStorage().subscribe(data => {\n      this.cartlength = this.productService.getProductsCountInCart();\n      this.wishlistlength = this.productService.getProductsCountInWishlist();\n    });\n  }\n  setCategoriesCount() {\n    for (var i = 0; i < this.productcategory.length; i++) {\n      var count = this.productblock.filter(product => {\n        return product.category.includes(parseInt(this.productcategory[i].id));\n      });\n      count = count.length;\n      this.productcategory[i].count = count;\n    }\n  }\n  socialShare(title) {\n    var socialIcons = [{\n      title: \"facebook\",\n      iconClass: \"fab fa-facebook-f\",\n      link: \"https://www.facebook.com/sharer/sharer.php?u=\" + encodeURIComponent(this.pageUrl) + \"\"\n    }, {\n      title: \"twitter\",\n      iconClass: \"fab fa-twitter\",\n      link: \"http://twitter.com/intent/tweet?text=\" + encodeURIComponent(title) + \"&\" + encodeURIComponent(this.pageUrl) + \"\"\n    }, {\n      title: \"linkedin\",\n      iconClass: \"fab fa-linkedin-in\",\n      link: \"https://www.linkedin.com/shareArticle?mini=true&url=\" + encodeURIComponent(this.pageUrl) + \"&title=\" + encodeURIComponent(title) + \"\"\n    }, {\n      title: \"pinterest\",\n      iconClass: \"fab fa-pinterest-p\",\n      link: \"http://pinterest.com/pin/create/button/?url=\" + encodeURIComponent(this.pageUrl) + \"\"\n    }];\n    return socialIcons;\n  }\n  openSocialPopup(social) {\n    window.open(social.link, \"MsgWindow\", \"width=600,height=600\");\n  }\n  filterItemsByCategory(category, id) {\n    this.filteredItems = this.items.filter(item => {\n      return item.category.includes(parseInt(category.id));\n    });\n    this.activeItem = id;\n  }\n  reset(id) {\n    this.filteredItems = [...this.items];\n    this.activeItem = id;\n  }\n  // Add to cart btn\n  handleAddToCart(product) {\n    this.productService.addToCart(product);\n  }\n  handleOutofStock() {\n    alert('Product Out of Stock');\n  }\n  handlePopupAddToCart(product) {\n    for (let i = 0; i < this.counter; i++) {\n      this.productService.addToCart(product);\n    }\n  }\n  detailHandleAddToCart(product) {\n    for (let i = 0; i < this.counter; i++) {\n      this.productService.addToCart(product);\n    }\n  }\n  // Add to Wishlist btn\n  handleAddToWishlist(product) {\n    this.productService.addToWishlist(product);\n  }\n  handleDeleteFromWishlist(product) {\n    if (confirm('Are you sure you want to delete this item from your Wishlist?')) {\n      this.productService.deleteFromWishlist(product);\n    }\n  }\n  isProductInWishlist(id) {\n    var _a;\n    return (_a = this.getWishlistProductsFromStorage()) === null || _a === void 0 ? void 0 : _a.includes(id.toString());\n  }\n};\nShopService = __decorate([Injectable({\n  providedIn: 'root'\n})], ShopService);\nexport { ShopService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}